version: "3.9"

networks:
  ki-agent-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  mongo_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # PostgreSQL - Audit & Metadaten (Production)
  postgres:
    image: postgres:15-alpine
    container_name: ki-agent-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ki_agent
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: ki_agent_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init_schema.sql:/docker-entrypoint-initdb.d/init_schema.sql
      - ./database/postgres.conf:/etc/postgresql/postgresql.conf
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.10
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ki_agent -d ki_agent_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis - Caching & Sessions (Production)
  redis:
    image: redis:7-alpine
    container_name: ki-agent-redis-prod
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass-file /run/secrets/redis_password
    ports:
      - "127.0.0.1:6380:6379"
    volumes:
      - redis_data:/data
      - ./database/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.11
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Qdrant - Vector Database (Production)
  qdrant:
    image: qdrant/qdrant:v1.10.0
    container_name: ki-agent-qdrant-prod
    restart: always
    ports:
      - "127.0.0.1:6334:6333"
      - "127.0.0.1:6335:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./configs/qdrant_config.yaml:/qdrant/config/production.yaml
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.12
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB - Document Storage (Production)
  mongo:
    image: mongo:7
    container_name: ki-agent-mongo-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ki_agent
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_password
    ports:
      - "127.0.0.1:27018:27017"
    volumes:
      - mongo_data:/data/db
      - ./configs/mongod.conf:/etc/mongod.conf
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.13
    secrets:
      - mongo_password
    command: mongod --config /etc/mongod.conf
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Elasticsearch - Search & Analytics (Production)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: ki-agent-elasticsearch-prod
    restart: always
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=false
      - ELASTIC_PASSWORD_FILE=/run/secrets/elasticsearch_password
      - cluster.name=ki-agent-cluster
      - node.name=ki-agent-node
      - bootstrap.memory_lock=true
    ports:
      - "127.0.0.1:9201:9200"
      - "127.0.0.1:9301:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./configs/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.14
    secrets:
      - elasticsearch_password
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # KI Agent Orchestrator (Production)
  orchestrator:
    build:
      context: .
      dockerfile: orchestrator/Dockerfile.prod
    container_name: ki-agent-orchestrator-prod
    restart: always
    environment:
      POSTGRES_URL: postgresql://ki_agent:$(cat /run/secrets/postgres_password)@postgres:5432/ki_agent_db
      REDIS_URL: redis://:$(cat /run/secrets/redis_password)@redis:6379
      QDRANT_URL: http://qdrant:6333
      MONGO_URL: mongodb://ki_agent:$(cat /run/secrets/mongo_password)@mongo:27017/ki_agent
      ELASTICSEARCH_URL: http://elastic:$(cat /run/secrets/elasticsearch_password)@elasticsearch:9200
      PYTHONPATH: /app
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      WORKERS: 4
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./data/models:/app/models
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.20
    secrets:
      - postgres_password
      - redis_password
      - mongo_password
      - elasticsearch_password
      - openai_api_key
      - anthropic_api_key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Agent Planner Service (Production)
  planner:
    build:
      context: .
      dockerfile: planner/Dockerfile.prod
    container_name: ki-agent-planner-prod
    restart: always
    environment:
      REDIS_URL: redis://:$(cat /run/secrets/redis_password)@redis:6379
      POSTGRES_URL: postgresql://ki_agent:$(cat /run/secrets/postgres_password)@postgres:5432/ki_agent_db
      LOG_LEVEL: INFO
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.21
    secrets:
      - postgres_password
      - redis_password
      - openai_api_key
      - anthropic_api_key
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Overlay Gateway (Production)
  overlay-gateway:
    build:
      context: .
      dockerfile: overlay/Dockerfile.prod
    container_name: ki-agent-overlay-prod
    restart: always
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      REDIS_URL: redis://:$(cat /run/secrets/redis_password)@redis:6379
      POSTGRES_URL: postgresql://ki_agent:$(cat /run/secrets/postgres_password)@postgres:5432/ki_agent_db
      NODE_ENV: production
      SESSION_SECRET_FILE: /run/secrets/session_secret
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.22
    secrets:
      - postgres_password
      - redis_password
      - session_secret
    depends_on:
      - redis
      - postgres
      - orchestrator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus Monitoring (Production)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ki-agent-prometheus-prod
    restart: always
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.30
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana Dashboard (Production)
  grafana:
    image: grafana/grafana:10.1.0
    container_name: ki-agent-grafana-prod
    restart: always
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.31
    secrets:
      - grafana_password
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ki-agent-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    networks:
      ki-agent-network:
        ipv4_address: 172.20.0.40
    depends_on:
      - orchestrator
      - overlay-gateway
      - grafana
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  mongo_password:
    file: ./secrets/mongo_password.txt
  elasticsearch_password:
    file: ./secrets/elasticsearch_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  session_secret:
    file: ./secrets/session_secret.txt
  openai_api_key:
    file: ./secrets/openai_api_key.txt
  anthropic_api_key:
    file: ./secrets/anthropic_api_key.txt